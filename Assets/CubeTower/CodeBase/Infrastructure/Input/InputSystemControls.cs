//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/CubeTower/SO/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace CubeTower.Infrastructure.Input
{
    public partial class @InputSystemControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystemControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Mobile"",
            ""id"": ""f90f41c8-a38f-4e6d-b710-2ec765c52f61"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""7f7032fe-d365-4779-92e4-d57d644b19ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""4d83f8d0-eab7-49a0-a401-fce0b7680e25"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""880f29fc-cf15-49f5-82cd-8ff753123ba7"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f27e7c10-07a7-4a04-89f2-7d341c4bf072"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Standalone"",
            ""id"": ""360a7a11-5a7d-4750-ba26-ac95a3702b0d"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""e29a8f9f-4780-4690-ae3c-e7f44e193a56"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b3d48f76-a326-43e6-ad58-ecd5ea7e63a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4007d01b-9fd6-4f8e-96c4-b52248494b83"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13107fe1-9851-44e6-aed8-9384f8cfadfc"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2a00efe-cb94-45e9-be9a-00813799bb50"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Mobile
            m_Mobile = asset.FindActionMap("Mobile", throwIfNotFound: true);
            m_Mobile_Position = m_Mobile.FindAction("Position", throwIfNotFound: true);
            m_Mobile_Press = m_Mobile.FindAction("Press", throwIfNotFound: true);
            // Standalone
            m_Standalone = asset.FindActionMap("Standalone", throwIfNotFound: true);
            m_Standalone_Press = m_Standalone.FindAction("Press", throwIfNotFound: true);
            m_Standalone_Position = m_Standalone.FindAction("Position", throwIfNotFound: true);
        }

        ~@InputSystemControls()
        {
            UnityEngine.Debug.Assert(!m_Mobile.enabled, "This will cause a leak and performance issues, InputSystemControls.Mobile.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Standalone.enabled, "This will cause a leak and performance issues, InputSystemControls.Standalone.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Mobile
        private readonly InputActionMap m_Mobile;
        private List<IMobileActions> m_MobileActionsCallbackInterfaces = new List<IMobileActions>();
        private readonly InputAction m_Mobile_Position;
        private readonly InputAction m_Mobile_Press;
        public struct MobileActions
        {
            private @InputSystemControls m_Wrapper;
            public MobileActions(@InputSystemControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_Mobile_Position;
            public InputAction @Press => m_Wrapper.m_Mobile_Press;
            public InputActionMap Get() { return m_Wrapper.m_Mobile; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MobileActions set) { return set.Get(); }
            public void AddCallbacks(IMobileActions instance)
            {
                if (instance == null || m_Wrapper.m_MobileActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MobileActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
            }

            private void UnregisterCallbacks(IMobileActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Press.started -= instance.OnPress;
                @Press.performed -= instance.OnPress;
                @Press.canceled -= instance.OnPress;
            }

            public void RemoveCallbacks(IMobileActions instance)
            {
                if (m_Wrapper.m_MobileActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMobileActions instance)
            {
                foreach (var item in m_Wrapper.m_MobileActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MobileActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MobileActions @Mobile => new MobileActions(this);

        // Standalone
        private readonly InputActionMap m_Standalone;
        private List<IStandaloneActions> m_StandaloneActionsCallbackInterfaces = new List<IStandaloneActions>();
        private readonly InputAction m_Standalone_Press;
        private readonly InputAction m_Standalone_Position;
        public struct StandaloneActions
        {
            private @InputSystemControls m_Wrapper;
            public StandaloneActions(@InputSystemControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Press => m_Wrapper.m_Standalone_Press;
            public InputAction @Position => m_Wrapper.m_Standalone_Position;
            public InputActionMap Get() { return m_Wrapper.m_Standalone; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(StandaloneActions set) { return set.Get(); }
            public void AddCallbacks(IStandaloneActions instance)
            {
                if (instance == null || m_Wrapper.m_StandaloneActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_StandaloneActionsCallbackInterfaces.Add(instance);
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
            }

            private void UnregisterCallbacks(IStandaloneActions instance)
            {
                @Press.started -= instance.OnPress;
                @Press.performed -= instance.OnPress;
                @Press.canceled -= instance.OnPress;
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
            }

            public void RemoveCallbacks(IStandaloneActions instance)
            {
                if (m_Wrapper.m_StandaloneActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IStandaloneActions instance)
            {
                foreach (var item in m_Wrapper.m_StandaloneActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_StandaloneActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public StandaloneActions @Standalone => new StandaloneActions(this);
        public interface IMobileActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnPress(InputAction.CallbackContext context);
        }
        public interface IStandaloneActions
        {
            void OnPress(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
        }
    }
}
